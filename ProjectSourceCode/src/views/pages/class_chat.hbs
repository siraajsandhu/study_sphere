<div class="container-fluid d-flex flex-column w-100 h-100 p-4">
  <div class="container-fluid w-75 h-100">
    <h6>&larr; Go back to <a href="/class/{{classInfo.id}}">{{classInfo.name}}</a></h6>

    <div class="border border-1 border-secondary rounded container-fluid w-100 d-flex flex-row ms-4 p-0" style="height: 90%;">
      <div class="col-sm-3 m-0 p-3 border-end border-1 border-secondary" style="background-color:aliceblue;">
        <h5>Welcome to the chat for {{classInfo.name}}!</h5>
        <p>Feel free to discuss general topics from the class.</p>
        <p class="text-muted">Participating as <span class="fst-italic">{{user.username}}</span></p>
      </div>
      <div class="col m-0 p-3 d-flex flex-column">

        <div id="chat-container" class="mb-1" style="height: 90%; overflow-y: scroll;">
          <table class="table table-sm">
            <colgroup>
              <col style="width:10%;"/>
              <col style="width:10%;"/>
              <col/>
            </colgroup>
            <tbody id="chat-log">
              <tr>
                <td>date</td>
                <td>name</td>
                <td>message</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div style="height: 10%">
          <div class="row">
            <div class="col">
              <input id="chat-in" type="text" required name="content" class="form-control" autocomplete='off' placeholder="Press enter to send.">
            </div>
          </div>
        </div>

        <form id="meta">
          <input type="hidden" name="username" value="{{user.username}}">
          <input type="hidden" name="classId" value="{{classInfo.id}}">
        </form>

      </div>
    </div>
  </div>
</div>
<script>
  const chatContainer = document.querySelector('#chat-container');
  const chatLog = document.querySelector('#chat-log');
  const chatIn = document.querySelector('#chat-in');
  const metaForm = document.querySelector('#meta');
  const meta = Object.fromEntries(new FormData(metaForm));

  console.log(meta);

  chatIn.onchange = () => {
    if (chatIn.value.length > 0) {
      fetch(`/class/${meta.classId}/chat/messages`, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          message: chatIn.value,
          date: Number(new Date()),
          username: meta.username,
        }),
      });

      chatIn.value = "";
    }
  }

  let lastChecked = Date.now();
  setInterval(async function poll() {
    let newMessages = await fetch(`/class/${meta.classId}/chat/messages?since=${lastChecked}`);
    newMessages = await newMessages.json();
    newMessages = newMessages.messages;
    
    console.log(newMessages);

    for (const {username, date, message} of newMessages) {
      const tr = document.createElement('tr');
      const td = new Array(3).fill().map(() => document.createElement('td'));

      td[0].textContent = 'date';
      td[1].textContent = username;
      td[2].textContent = message;

      td.forEach(el => tr.appendChild(el));
      chatLog.appendChild(tr);
    }

    if (newMessages.length > 0) {
      lastChecked = Math.max(...newMessages.map(m => m.date));
    }

    chatContainer.scrollTop = chatContainer.scrollHeight;

    if (isNaN(lastChecked)) console.log('NAN', newMessages);
  }, 2000);
</script>
